# Define the constant path for the customer list file
$customerListPath = "C:\Users\User\Desktop\JEAV\Customer List.csv"

# Define the base path for the raw file directory
$rawFileBasePath = "C:\Users\User\Desktop\JEAV\EDI Reconcile (monday)"

# Function to get the most recent week folder
function Get-LatestWeekFolder {
    Get-ChildItem -Path $rawFileBasePath -Directory | 
    Where-Object { $_.Name -match '^Week_\d+_\(\d{2}\.\d{2}\.\d{2}\)_\(\d{2}\.\d{2}\.\d{2}\)$' } |
    Sort-Object LastWriteTime -Descending | 
    Select-Object -First 1
}

# Function to convert INV NO to date
function ConvertTo-Date {
    param (
        [string]$invNo
    )
    
    if ($invNo -eq "N/A") { return "N/A" }
    
    $dateCode = $invNo.Substring($invNo.Length - 4)
    $yearLetter = $dateCode[0]
    $monthLetter = $dateCode[1]
    $day = [int]$dateCode.Substring(2)
    
    $year = [int][char]$yearLetter - [int][char]'Y' + 2024
    # Adjust month calculation to skip 'I'
    $month = [int][char]$monthLetter - [int][char]'A' + 1
    if ($monthLetter -gt 'I') { $month-- }  # Decrement month if it's after 'I'

    try {
        $date = Get-Date -Year $year -Month $month -Day $day
        return $date.ToString("MM/dd/yyyy")
    }
    catch {
        return "Invalid Date"
    }
}

# Function to determine the account based on CUST NO, Carrier, and Sub Carrier
function Get-Account {
    param (
        [string]$custNo,
        [string]$carrier,
        [string]$subCarrier
    )
    
    switch ($custNo[0]) {
        "1" { 
            if ($carrier -eq "FedEx" -and $subCarrier -eq "ENGLAND") {
                return "FEDEX COST (ENGLAND LOGISTICS)"
            }
            elseif ($carrier -eq "FedEx" -and $subCarrier -eq "RSIS") {
                return "FEDEX COST (DESCARTES)"
            }
            elseif ($carrier -eq "UPS") {
                return "UPS COST"
            }
            else {
                return "DHL COST"
            }
        }
        "5" { return "DHL COST FJ" }
        "6" { return "DHL COST FS" }
        default { return "UNKNOWN" }
    }
}

# Function to process Sales Rep for CLASS
function Get-Class {
    param (
        [string]$salesRep
    )
    
    if ($salesRep -and $salesRep.Length -gt 0) {
        return $salesRep.Substring(0, [Math]::Min(5, $salesRep.Length))
    }
    return ""
}

# Get the latest week folder
$latestWeekFolder = Get-LatestWeekFolder

if ($latestWeekFolder) {
    # Extract date range from the folder name
    $folderName = $latestWeekFolder.Name
    $matches = [regex]::Match($folderName, '\((\d{2}\.\d{2}\.\d{2})\)_\((\d{2}\.\d{2}\.\d{2})\)')
    if ($matches.Success) {
        $startDateStr = $matches.Groups[1].Value
        $endDateStr = $matches.Groups[2].Value
        $dateRange = "($startDateStr)_($endDateStr)"
    } else {
        Write-Host "Unable to extract date range from folder name: $folderName" -ForegroundColor Red
        exit 1
    }

    # Construct the full path to the raw file
    $rawFilePathPattern = Join-Path -Path $latestWeekFolder.FullName -ChildPath "1.Gathering_Data\RS\RAW_EDI_RS_*.csv"
    
    # Get the most recent raw file in the folder
    $latestRawFile = Get-ChildItem -Path $rawFilePathPattern | Sort-Object LastWriteTime -Descending | Select-Object -First 1

    if ($latestRawFile) {
        Write-Host "Using raw file: $($latestRawFile.FullName)" -ForegroundColor Green
        
        # Import CSV files
        $rawData = Import-Csv -Path $latestRawFile.FullName
        $customerList = Import-Csv -Path $customerListPath

        $reportData = $rawData | 
            Where-Object { 
                $_.Carrier -in @("FedEx", "UPS") -and
                -not ($_.'Carrier Inv. #' -like 'D*') -and
                -not ($_.Customer -match '^Curlmix' -or $_.Customer -match '^TRG')
            } | 
            ForEach-Object {
                $currentRow = $_
                $customer = $customerList | Where-Object { $_.'Customer Id' -eq $currentRow.'Customer #' } | Select-Object -First 1
                
                if ($customer) {
                    $invNo = if ($currentRow.'Invoice Number') { $currentRow.'Invoice Number'[-8..-1] -join '' } else { "N/A" }
                    $convertedDate = ConvertTo-Date -invNo $invNo
                    
                    $subCarrier = if ($currentRow.Carrier -eq "FedEx" -and [string]::IsNullOrWhiteSpace($currentRow.'Sub Carrier')) {
                        "RSIS"
                    } else {
                        $currentRow.'Sub Carrier'
                    }
                    
                    $vendor = if ($subCarrier -eq "RSIS") {
                        "DESCARTES"
                    } elseif ($subCarrier -eq "ENGLAND") {
                        "ENGLAND LOGISTICS"
                    } else {
                        "$($currentRow.Carrier) EXPRESS"
                    }
                    
                    [PSCustomObject]@{
                        'DATE' = $convertedDate
                        'CUST NO' = $currentRow.'Customer #'
                        'CUSTOMER' = $customer.'Customer'
                        'CLASS' = Get-Class -salesRep $currentRow.'Sales Rep'
                        'BILL NO' = $currentRow.'Carrier Inv. #'
                        'VENDOR' = $vendor
                        'MEMO BILL ITEM' = "$($currentRow.'Carrier') | AIRBILL# $($currentRow.'Airbill Number') | $($currentRow.'Service Type') | $subCarrier"
                        'AMOUNT' = $currentRow.'Carrier Cost Total'
                        'ACCOUNT' = Get-Account -custNo $currentRow.'Customer #' -carrier $currentRow.Carrier -subCarrier $subCarrier
                    }
                } else {
                    Write-Host "Customer not found for Customer #: $($currentRow.'Customer #')" -ForegroundColor Yellow
                }
            }

        # Sort the report data by BILL NO from smallest to largest
        $sortedReportData = $reportData | Sort-Object { [long]$_.'BILL NO' }

        # Define output folder path
        $outputFolderPath = Join-Path -Path $latestWeekFolder.FullName -ChildPath '4.QB_Report\SHIPIUM (NOT DHL)'

        # Ensure the output directory exists
        if (-not (Test-Path -Path $outputFolderPath)) {
            New-Item -Path $outputFolderPath -ItemType Directory -Force | Out-Null
        }

        # Define output file name
        $outputFileName = "SHIPIUM EDI ROCKSOLID UPS FedEx BILLS Cost_$dateRange.csv"

        # Define output file path
        $outputFilePath = Join-Path -Path $outputFolderPath -ChildPath $outputFileName

        # Export sorted data to CSV, using -Force to overwrite existing file
        $sortedReportData | Export-Csv -Path $outputFilePath -NoTypeInformation -Force

        Write-Host "Carrier Billing report exported to: $outputFilePath" -ForegroundColor Green
        Write-Host "Script completed successfully." -ForegroundColor Green

        # Display summary of problematic data
        $invalidDates = $sortedReportData | Where-Object { $_.'DATE' -eq 'Invalid Date' -or $_.'DATE' -eq 'N/A' }
        if ($invalidDates) {
            Write-Host "`nWarning: Some records have invalid or missing dates:" -ForegroundColor Yellow
            $invalidDates | ForEach-Object {
                Write-Host "Customer: $($_.'CUST NO'), Bill No: $($_.'BILL NO'), Date: $($_.'DATE')" -ForegroundColor Yellow
            }
        }

        $unknownAccounts = $sortedReportData | Where-Object { $_.'ACCOUNT' -eq 'UNKNOWN' }
        if ($unknownAccounts) {
            Write-Host "`nWarning: Some records have unknown account types:" -ForegroundColor Yellow
            $unknownAccounts | ForEach-Object {
                Write-Host "Customer: $($_.'CUST NO'), Bill No: $($_.'BILL NO'), Account: $($_.'ACCOUNT')" -ForegroundColor Yellow
            }
        }

        $zeroAmounts = $sortedReportData | Where-Object { [double]$_.'AMOUNT' -eq 0 }
        if ($zeroAmounts) {
            Write-Host "`nWarning: Some records have zero amounts:" -ForegroundColor Yellow
            $zeroAmounts | ForEach-Object {
                Write-Host "Customer: $($_.'CUST NO'), Bill No: $($_.'BILL NO'), Amount: $($_.'AMOUNT')" -ForegroundColor Yellow
            }
        }
    } else {
        Write-Host "No raw file found in the latest week folder." -ForegroundColor Red
    }
} else {
    Write-Host "No week folders found in the specified directory." -ForegroundColor Red
}
