# Base directory where the week folders are located
$baseDir = "C:\Users\User\Desktop\JEAV\Weekly Payments Reconcile (daily)\RS vs QB"

# Get all directories matching the pattern "Week_*"
$weekFolders = Get-ChildItem -Path $baseDir -Directory | Where-Object {
    $_.Name -match '^Week_\d+_\(\d{2}\.\d{2}\.\d{2}\)_\(\d{2}\.\d{2}\.\d{2}\)$'
}

# Initialize an array to hold folder info
$folderInfoList = @()

foreach ($folder in $weekFolders) {
    $folderName = $folder.Name

    # Extract the end date from the folder name using regex
    $matches = [regex]::Match($folderName, '^Week_(\d+)_\((\d{2}\.\d{2}\.\d{2})\)_\((\d{2}\.\d{2}\.\d{2})\)$')

    if ($matches.Success) {
        $weekNumber = [int]$matches.Groups[1].Value
        $startDateStr = $matches.Groups[2].Value
        $endDateStr = $matches.Groups[3].Value

        # Define the date format
        $dateFormat = 'MM.dd.yy'

        # Parse the end date string into a DateTime object
        try {
            $endDate = [DateTime]::ParseExact($endDateStr, $dateFormat, $null)
        } catch {
            Write-Warning "Failed to parse date for folder: $folderName"
            continue
        }

        # Add to the folder info list
        $folderInfoList += [PSCustomObject]@{
            Folder       = $folder
            EndDate      = $endDate
            WeekNumber   = $weekNumber
        }
    }
}

# Check if any folders were found
if ($folderInfoList.Count -eq 0) {
    Write-Error "No folders matching the pattern were found in $baseDir"
    exit 1
}

# Find the folder with the latest end date (or highest week number if preferred)
$latestFolderInfo = $folderInfoList | Sort-Object -Property EndDate -Descending | Select-Object -First 1

$latestFolder = $latestFolderInfo.Folder

# Construct the input file path
$inputFilePath = Join-Path -Path $latestFolder.FullName -ChildPath '1.Gathering'

# Look for the RAW file inside the '1.Gathering' subfolder
$rawFile = Get-ChildItem -Path $inputFilePath -Filter 'RAW_*.csv' | Select-Object -First 1

if (-not $rawFile) {
    Write-Error "No RAW file found in $inputFilePath"
    exit 1
}

$inputFilePath = $rawFile.FullName

# Define the combined report path (assuming it remains the same)
$combinedReportPath = "C:\Users\User\Desktop\JEAV\Weekly Payments Reconcile (daily)\Weekly Payables\Combined_Invoice_Report.csv"

# Define the output file path
$outputFilePath = [System.IO.Path]::Combine([System.Environment]::GetFolderPath('Desktop'), 'CleanedData.csv')

# Import the CSV files
$data = Import-Csv -Path $inputFilePath
$combinedInvoiceReport = Import-Csv -Path $combinedReportPath

# Create a hashtable for quick invoice to Column B lookup
$invoiceColumnBMap = @{}
foreach ($invoice in $combinedInvoiceReport) {
    $invoiceNumber = $invoice.'Invoice Number'
    $columnBValue = $invoice.'Column B'

    if ($invoiceNumber -and $columnBValue) {
        $invoiceColumnBMap[$invoiceNumber] = $columnBValue
    }
}

# Process and clean the data
$cleanedData = $data | Where-Object {
    # Apply multiple conditions
    $_.'Check #' -notlike '*CC*' -and                   # Remove rows where Check # contains 'CC'
    $_.Notes -notmatch '(?i)prepaid|prepay' -and        # Remove rows with 'Prepaid' or 'Prepay' in Notes
    $_.Notes -notmatch '(?i)re-allocated'               # Remove rows with 're-allocated' in Notes
} | ForEach-Object {
    # If Check # is empty, use Bank Name
    if ([string]::IsNullOrWhiteSpace($_.'Check #')) {
        $_.'Check #' = $_.'Bank Name'
    }

    # Change "American Express" to "Amex" in Check #
    if ($_.'Check #' -like '*American Express*') {
        $_.'Check #' = $_.'Check #' -replace 'American Express', 'Amex'
    }

    ### Determine Payment Method ###
    # Trim and normalize 'Check #' for consistent comparison
    $checkNumberTrimmed = $_.'Check #'.Trim()
    $checkNumberUpper = $checkNumberTrimmed.ToUpper()

    # Check for Credit Card types (card name at the beginning)
    if ($checkNumberUpper -match '^(AMEX|MASTERCARD|MC|VISA|DISCOVER|CARD)') {
        $paymentMethod = 'Credit Card'
    }
    # Check if 'Check #' contains 'ACH' (case-insensitive)
    elseif ($checkNumberUpper -like '*ACH*') {
        $paymentMethod = 'ACH'
    }
    # Check if 'Check #' is a numeric value (Check)
    elseif ($checkNumberTrimmed -match '^\d+$') {
        $paymentMethod = 'Check'
    }
    else {
        $paymentMethod = 'Other'
    }

    ### Lookup Column B Information ###
    # Initialize an array to hold Column B values
    $columnBList = @()

    # Split 'Invoice Id(s)' into individual IDs
    $invoiceIds = $_.'Invoice Id(s)' -split '[,;]' | ForEach-Object { $_.Trim() }

    foreach ($invoiceId in $invoiceIds) {
        if ($invoiceColumnBMap.ContainsKey($invoiceId)) {
            $columnBValue = $invoiceColumnBMap[$invoiceId]
            if (-not [string]::IsNullOrEmpty($columnBValue) -and -not $columnBList.Contains($columnBValue)) {
                $columnBList += $columnBValue
            }
        }
    }

    # Join the Column B values into a single string
    $columnB = $columnBList -join ', '

    # Create a custom object with all required columns, including Column B and Payment Method
    [PSCustomObject]@{
        Amount          = $_.Amount
        'Column B'      = $columnB         # New 'Column B' column
        'Check #'       = $_.'Check #'
        'Payment Date'  = $_.'Payment Date'
        'Customer Id'   = $_.'Customer Id'
        'Customer'      = $_.'Customer'
        'Invoice Id(s)' = $_.'Invoice Id(s)'
        Notes           = $_.Notes
        'Payment Method'= $paymentMethod
    }
}

# Define the desired order of Payment Methods
$paymentMethodOrder = @('Check', 'ACH', 'Credit Card', 'Other')

# Sort the cleaned data by Payment Date, Payment Method (according to the desired order), and then by Check #
$sortedData = $cleanedData | Sort-Object -Property @{
    Expression = { $_.'Payment Date' }
    Ascending = $true
}, @{
    Expression = { [array]::IndexOf($paymentMethodOrder, $_.'Payment Method') }
    Ascending = $true
}, 'Check #'

# Prepare to write CSV content
$outContent = @()
$csvHeaders = $sortedData[0].PsObject.Properties.Name

# Reorder headers to place 'Column B' as the second column
$csvHeaders = $csvHeaders | Where-Object { $_ -ne 'Column B' }
$csvHeaders = @($csvHeaders[0], 'Column B') + $csvHeaders[1..($csvHeaders.Count - 1)]

# Join headers into a CSV header line
$csvHeaderLine = $csvHeaders -join ','

$outContent += $csvHeaderLine

# Group the data by Payment Date
$groupedByDate = $sortedData | Group-Object -Property 'Payment Date'

foreach ($dateGroup in $groupedByDate) {
    $paymentDate = $dateGroup.Name

    # Group the data within the date by Payment Method
    $groupedByMethod = $dateGroup.Group | Group-Object -Property 'Payment Method'

    # Order the groups according to the desired payment method order
    $orderedMethodGroups = $paymentMethodOrder | ForEach-Object {
        $methodName = $_
        $groupedByMethod | Where-Object { $_.Name -eq $methodName }
    } | Where-Object { $_ -ne $null }

    foreach ($methodGroup in $orderedMethodGroups) {
        $paymentMethod = $methodGroup.Name

        # For each record in the method group, convert to CSV lines
        $csvLines = $methodGroup.Group | Select-Object $csvHeaders | ConvertTo-Csv -NoTypeInformation

        # Remove header line from ConvertTo-Csv output
        $csvLines = $csvLines[1..($csvLines.Count - 1)]
        
        $outContent += $csvLines

        # Add two empty lines after each Payment Method group except the last one
        if ($methodGroup -ne $orderedMethodGroups[-1]) {
            # Generate an empty line with the correct number of commas
            $emptyLine = ',' * ($csvHeaders.Count - 1)
            $outContent += $emptyLine
            $outContent += $emptyLine
        }
    }

    # Add two empty lines after each Payment Date group except the last one (if needed)
    if ($dateGroup -ne $groupedByDate[-1]) {
        $emptyLine = ',' * ($csvHeaders.Count - 1)
        $outContent += $emptyLine
        $outContent += $emptyLine
    }
}

# Write the content to the output CSV file
$outContent | Set-Content -Path $outputFilePath -Encoding UTF8

# Output completion message
Write-Host "Cleaning, filtering, and sorting completed. Cleaned data saved to: $outputFilePath" -ForegroundColor Green
